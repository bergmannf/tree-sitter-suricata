let ACTIONS = [
        'alert',
        'drop',
        'pass',
        'reject',
        'rejectboth',
        'rejectdst',
        'rejectsrc',
]

let PROTOCOLS = [
        'dcerpc',
        'dhcp',
        'dnp3',
        'dns',
        'enip',
        'ftp',
        'http',
        'http2',
        'icmp',
        'ikev2',
        'imap',
        'ip',
        'ipv6',
        'krb5',
        'modbus',
        'nfs',
        'ntp',
        'pkthdr',
        'rdp',
        'rfb',
        'sip',
        'smb',
        'smtp',
        'snmp',
        'ssh',
        'tcp',
        'tftp',
        'tls',
        'udp',
]

module.exports = grammar({
        name: 'suricata',

        rules: {
                file: $ => repeat(choice($.rule, $.comment)),
                rule: $ => seq($.action, $.protocol, $.network, $.port, $.direction, $.network, $.port, $.options),
                direction: $ => choice("->", "<>"),
                action: $ => choice(...ACTIONS),
                protocol: $ => choice(...PROTOCOLS),
                network: $ => seq(choice($.network_ip, $.network_list)),
                network_ip: $ => choice("any", $.variable, seq($.network_cidr, optional(seq("/", $.network_subnet_mask)))),
                network_cidr: $ => seq(optional("!"), $.network_octet, ".", $.network_octet, ".", $.network_octet, ".", $.network_octet),
                network_octet: $ => /\d{1,3}/,
                network_subnet_mask: $ => /\d{1,2}/,
                network_list: $ => seq(optional("!"), '[', $.network_list_entry, ']'),
                network_list_entry: $ => seq($.network_ip, repeat(seq(",", $.network_ip))),
                port: $ => choice($.port_spec, $.variable, $.port_list),
                port_list: $ => seq('[', seq($.port_spec, repeat(seq(",", $.port_spec))), ']'),
                port_spec: $ => seq(optional("!"), choice("any", $.port_single, $.port_range)),
                port_single: $ => /\d{1,5}/,
                port_range: $ => prec.right(1, seq($.port_single, ":", optional($.port_single))),
                variable: $ => seq("$", /\w+/),
                options: $ => seq("(", $.option, ")"),
                option: $ => repeat1(seq($.option_key_value, ";")),
                option_key_value: $ => seq($.option_key, optional(seq(":", $.option_value))),
                option_key: $ => /[-.\w]+/,
                option_value: $ => /[^;)\n]+/,
                comment: $ => seq("#", /.*/),
        }
});
